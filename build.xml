<!-- 
 * LODeXporter - http://www.semanticsoftware.info/lodexporter
 *
 * This file is part of the LODeXporter component.
 *
 * Copyright (c) 2015, 2016, 2017 Semantic Software Lab, http://www.semanticsoftware.info
 *    Rene Witte
 *    Bahar Sateli
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either 
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 * 
 -->
<project name="LODeXporter" basedir="." default="all" 
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
         xmlns:fb="antlib:edu.umd.cs.findbugs">

        <!-- Prevent Ant from warning about includeantruntime not being set -->
        <property name="build.sysclasspath" value="ignore" />

        <property file="build.properties" />

        <!--=======================================================
            Property settings.  You should not need to edit these
            directly, if you need to set a different value for any
            property you should edit build.properties and override
            them there.
         ========================================================-->

        <!-- Name of our plugin -->
        <property name="plugin.name" value="LODeXporter"/>

        <!-- Make environment variables available -->
        <property environment="env" />

        <!-- If environment variable GATE_HOME is set, use it for
             gate.home (unless it was already set in build.properties -->
        <condition property="gate.home" value="${env.GATE_HOME}">
                <isset property="env.GATE_HOME"/>
        </condition>

        <!-- If gate.home is not set from build.properties or the 
             environment variable GATE_HOME, assume that this
             plugin is in GATE Developer's plugin directory -->
        <property name="gate.home" location="../.." />

        <!-- location of GATE lib directory - should be inferred from gate.home -->
        <property name="gate.lib" location="${gate.home}/lib" />

        <!-- location of gate.jar - should be inferred from gate.home -->
        <property name="gate.jar" location="${gate.home}/bin/gate.jar" />

        <!-- Source directory - contains the Java source files for this plugin -->
        <property name="src.dir" location="src" />

        <!-- directory to contain the compiled classes -->
        <property name="classes.dir" location="classes" />

        <!-- documentation directory -->
        <property name="doc.dir" location="doc" />

        <!-- JavaDoc documentation directory -->
        <property name="javadoc.dir" location="${doc.dir}/javadoc" />

        <!-- lib directory containing the required libraries -->
        <property name="lib.dir" location="lib" />

        <!-- resolve libraries through ivy -->
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
            <classpath>
                <pathelement location="${gate.home}/build/lib/ivy.jar" />
            </classpath>
        </taskdef>
        <ivy:retrieve sync="true" type="jar,bundle" pattern="${lib.dir}/[artifact]-[revision].[ext]" />
        <ivy:report todir="${lib.dir}" graph="false" />

        <!-- jacoco test coverage tool -->
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
            <classpath path="/usr/local/durmtools/jacoco/lib/jacocoant.jar" />
        </taskdef>        

        <!-- location for the generated JAR file -->
        <property name="jar.location" location="${plugin.name}.jar" />

        <!-- For JaCoCo Ant tasks -->
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
                <classpath path="/usr/local/durmtools/jacoco/lib/jacocoant.jar" />
        </taskdef>

        <!-- For JUnit test task -->
        <property name="test.dir" location="test" />
        <property name="test.reports.dir" location="${test.dir}/reports" />
        <property name="test.src.dir" location="${test.dir}/src" />
        <property name="test.classes.dir" location="${test.dir}/classes" />
        <property name="test.resources.dir" location="${test.dir}/resources" />
        <property name="result.exec.file" location="${test.reports.dir}/jacoco.exec" />

        <!-- Classpath to compile - includes gate.jar, GATE/lib/*.jar and any local library JAR files. -->
        <path id="compile.classpath">
                <pathelement location="${gate.jar}" />
                <fileset dir="${gate.lib}">
                        <include name="**/*.jar" />
                        <include name="**/*.zip" />
                </fileset>
                <fileset dir="${lib.dir}" includes="**/*.jar" />
        </path>

        <!-- software revision number -->
        <property name="release.version" value="0.1"/>
        <property file="version.properties"/>

        <!--====================== Targets ============================-->

        <!-- create build directory structure -->
        <target name="prepare">
                <mkdir dir="${classes.dir}" />
        </target>

        <!-- Build everything - the code and JavaDoc -->
        <target name="all" depends="jar, javadoc" />

        <!-- record information about a build -->
        <target name="buildprops">
            <tstamp>
                <format property="builtat" pattern="yyyy-MM-dd-HH-mm-ss" timezone="America/New_York"/>
            </tstamp>
            <exec executable="whoami" outputproperty="whoami"/>

            <propertyfile file="version.properties"
                comment="This file is automatically generated - DO NOT EDIT">
                <entry key="buildtime" value="${builtat}"/>
                    <entry key="buildrepo" value="git"/>
                    <entry key="builder" value="${user.name}"/>
                    <entry key="version" value="${release.version}-${buildrepo}-${builtat}"/>
            </propertyfile>
        </target>

        <!-- compile the source -->
        <target name="compile" depends="prepare">
            <javac classpathref="compile.classpath"
                srcdir="${src.dir}"
                destdir="${classes.dir}"
                debug="true"
                debuglevel="lines,source"
                encoding="UTF-8"
                source="1.8"
                target="1.8">
                <compilerarg value="-Xmaxwarns" />
                    <compilerarg value="${gate.compile.maxwarnings}" />
                    <compilerarg value="-Xlint:all" />
            </javac>
        </target>

        <!-- copy resources (anything non-.java) from src to classes -->
        <target name="copy.resources" depends="prepare">
            <copy todir="${classes.dir}">
                    <fileset dir="${src.dir}" excludes="**/*.java" />
            </copy>
        </target>

        <!-- create the JAR file -->
        <target name="jar" depends="compile, copy.resources" >
            <jar destfile="${jar.location}"
                update="false"
                basedir="${classes.dir}" />
        </target>

        <!-- remove the generated .class files -->
        <target name="clean.classes" >
            <delete dir="${classes.dir}" />
        </target>

        <!-- clean resources generated by tests -->
        <target name="clean.tests">
            <delete>
                <fileset dir="." includes="TEST*.xml" />
            </delete>
            <delete dir="${test.classes.dir}" />
        </target>

        <!-- Clean up - remove .class and .jar files -->
        <target name="clean" depends="clean.classes, clean.tests" >
            <delete file="${jar.location}" />
        </target>

        <!-- Clean up everything, including Javadoc -->
        <target name="docclean" depends="clean, clean.javadoc" >
        </target>

        <!-- Build JavaDoc documentation -->
        <target name="doc.prepare">
            <mkdir dir="${javadoc.dir}" />
        </target>

        <!-- Clean JavaDoc documentation -->
        <target name="clean.javadoc">
            <delete dir="${javadoc.dir}" />
        </target>

        <target name="javadoc" depends="doc.prepare">
            <javadoc destdir="${javadoc.dir}" packagenames="*" classpathref="compile.classpath" encoding="UTF-8" windowtitle="${plugin.name} JavaDoc" source="8">
                <sourcepath>
                    <pathelement location="${src.dir}" />
                </sourcepath>
                <link href="http://docs.oracle.com/javase/8/docs/api/" />
            </javadoc>
        </target>

        <!-- Other targets:
         build: build the plugin - just calls "jar" target
         distro.prepare: remove intermediate files that shouldn't be in the
                         distribution -->
        <target name="build" depends="jar" />

        <!-- JUnit tests -->
        <path id="test.classpath">
            <path refid="compile.classpath" />
            <pathelement location="${jar.location}" />
        </path>

        <target name="test.prepare">
            <mkdir dir="${test.classes.dir}" />
            <mkdir dir="${test.reports.dir}" />
        </target>

        <target name="test.compile" depends="test.prepare,build">
            <javac classpathref="test.classpath" srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="true" debuglevel="lines,source" source="1.8" />
        </target>

        <target name="test" depends="test.compile">
            <jacoco:coverage destfile="${result.exec.file}">
                <junit fork="yes" haltonfailure="no" showoutput="yes" printsummary="on">
                    <test name="info.semanticsoftware.lodexporter.LODeXporterTest" toDir="${test.reports.dir}" />
                        <sysproperty key="lodexporter.plugin.dir" file="${basedir}" />
                            <formatter type="xml" />
                            <classpath>
                                <path refid="test.classpath" />
                                <pathelement path="${test.classes.dir}" />
                                <pathelement path="${test.resources.dir}" />
                                <pathelement location="x/y/z"/>
                            </classpath>
                </junit>
            </jacoco:coverage>
        </target>

        <target name="distro.prepare" depends="clean.classes, clean.tests" />
</project>